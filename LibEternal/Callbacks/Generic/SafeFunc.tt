<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#
	for (int i = 0; i <= MaxGenericTypeArgs; i++)
	{
		Create(i);
	}
#>

<#+
		//CONFIG!!!
		//The maximum amount of generic type arguments 
		private const byte MaxGenericTypeArgs = 2;
		private const string OutputFileFormat = NonGenericTypeName + "`{0}.cs";
		private const string NonGenericTypeName = "SafeFunc";
#>

<#+
	/// <summary>
	///     Makes a string containing generic arguments XML-safe
	/// </summary>
	private static string MakeXmlSafe(string str)
	{
		return str.Replace('<', '{').Replace('>', '}');
	}#>

<#+
	private void Create(int numTypeArgs)
	{
		ClearIndent();
#>
//Generated using T4 templates

using LibEternal.JetBrains.Annotations;
using LibEternal.Collections;
using System;
using System.Collections.Generic;

namespace LibEternal.Callbacks.Generic
{
<#+
		if (numTypeArgs < 0)
		{
			Error($"Number of type args below 0: {numTypeArgs}");
			return;
		}
		string genericTypeArgs;
		//No args
		if (numTypeArgs == 0) genericTypeArgs = "<TReturn>";
		else
		{
			StringBuilder typeArgBuilder = new StringBuilder("<");
			for (int i = 0; i < numTypeArgs; i++)
			{
				//Append a new generic type argument e.g. "T1"
				typeArgBuilder.AppendFormat("T{0}", i);
				//Add a ', ' if it's not the last type arg
				if (i < numTypeArgs - 1) typeArgBuilder.Append(", ");
			}
			typeArgBuilder.Append(", TReturn>");

			genericTypeArgs = typeArgBuilder.ToString();
		}
		string fullTypeName = NonGenericTypeName + genericTypeArgs;
		string baseCallbackTypeName = $"Func{genericTypeArgs}";
		Warning($"Generating {fullTypeName} ({baseCallbackTypeName})");

		PushIndent("\t");
#>
/// <summary>
///     A safe alternative to an <see cref="<#= MakeXmlSafe(baseCallbackTypeName) #>" />
/// </summary>
[PublicAPI, System.Runtime.CompilerServices.CompilerGenerated]
public sealed class <#= fullTypeName #>
{
<#+
		PushIndent("\t");
#>
/// <summary>
///     The <see cref="HashSet{T}" /> of callbacks.
/// </summary>
private readonly HashSet<<#= baseCallbackTypeName #>> callbacks;

/// <summary>
///     An event used to add and remove <see cref="<#=MakeXmlSafe(baseCallbackTypeName) #>" />s from the invocation list
/// </summary>
public event <#=baseCallbackTypeName #> Event
{
	add => callbacks.Add(value);
	remove => callbacks.Remove(value);
}

/// <summary>
///     A readonly wrapper around the set of callbacks, to allow read-only access
/// </summary>
public readonly ReadonlySet<<#= baseCallbackTypeName #>> Callbacks;

<#+

#>
/// <summary>
///     The constructor to instantiate a new <see cref="<#= MakeXmlSafe(fullTypeName) #>" />
/// </summary>
/// <param name="callbacks">An optional <see cref="List{T}" /> of <see cref="Action" />s to use as a base</param>
public <#= NonGenericTypeName #>([CanBeNull] IEnumerable<<#=baseCallbackTypeName #>> callbacks = null)
{
    // ReSharper disable once ConvertIfStatementToConditionalTernaryExpression
    if(callbacks is null) this.callbacks = new HashSet<<#=baseCallbackTypeName #>>();
    else this.callbacks = new HashSet<<#=baseCallbackTypeName #>>(callbacks);
    //Initialize the ReadonlySet field using our newly made HashSet
    Callbacks = new ReadonlySet<<#= baseCallbackTypeName #>>(this.callbacks);
}

<#+
		//A string for the parameters passed into InvokeSafe() (e.g. InvokeSafe<T0, T1>("T0 param0, T1 param1"))
		string inputParams;
		//A string for the parameters we pass into the callbacks (e.g. callbacks[i].Invoke("param1, param2"))
		string callbackParams;
		//Don't need a string for the generic type args, created it earlier
		if (numTypeArgs == 0) inputParams = callbackParams = "";
		else
		{
			StringBuilder inputParamsBuilder = new StringBuilder();
			StringBuilder callbackParamsBuilder = new StringBuilder();
			for (int i = 0; i < numTypeArgs; i++)
			{
				string typeArgument = $"T{i}";
				string paramName = $"param{i}";
				//The input params need a type argument, but the callback ones don't
				inputParamsBuilder.Append(typeArgument).Append(' ').Append(paramName);
				callbackParamsBuilder.Append(paramName);

				//If we're not on the last type/parameter
				if (i < numTypeArgs - 1)
				{
					inputParamsBuilder.Append(", ");
					callbackParamsBuilder.Append(", ");
				}
			}
			inputParams = inputParamsBuilder.ToString();
			callbackParams = callbackParamsBuilder.ToString();
		}
#>

/// <summary>
///     Invokes the <see cref="callbacks" />, catching and returning all thrown <see cref="Exception" />s
/// </summary>
/// <returns>A <see cref="List{T}" /> of <see cref="Exception" />s that were thrown during invocation</returns>
public (List<Exception> Exceptions, List<TReturn> Results) InvokeSafe(<#= inputParams #>)
{
	List<Exception> exceptions = new List<Exception>();
    List<TReturn> results = new List<TReturn>();

	foreach (<#= baseCallbackTypeName #> callback in callbacks)
	{
		try
		{
            if(callback is null) continue;
			TReturn result = callback.Invoke(<#= callbackParams #>);
            results.Add(result);
		}
		//Called if there's an exception in one of the callbacks
		catch (Exception e)
		{
			exceptions.Add(e);
		}
	}

	return (exceptions, results);
}
<#+
		//Write the closing indent (for the class and namespace)
		ClearIndent();
#>
    }
}<#+
		//Save the output
		SaveOutput(string.Format(OutputFileFormat, numTypeArgs));
	}#>

<#+
		//Save Output function
		//Lets us save to a different output file than the default. (credit: https://stackoverflow.com/a/44340464)
	private void SaveOutput(string outputFileName)
	{
		string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = Path.Combine(templateDirectory!, outputFileName);
		File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());
		GenerationEnvironment.Remove(0, GenerationEnvironment.Length);
	}#>